// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReactDotNetDemo.Models;

namespace ReactDotNetDemo.Migrations
{
    [DbContext(typeof(PASSContext))]
    [Migration("20180727170201_defaultpoint")]
    partial class defaultpoint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefaultIndicatorGroupId");

                    b.HasKey("ActivityId");

                    b.HasIndex("DefaultIndicatorGroupId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.ActivityDescriptionTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("ActivityId");

                    b.HasKey("TranslationId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityDescriptionTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.ActivityNameTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("ActivityId");

                    b.HasKey("TranslationId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityNameTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.Indicator", b =>
                {
                    b.Property<int>("IndicatorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefaultMeasureId");

                    b.Property<int>("LifeCourseId");

                    b.HasKey("IndicatorId");

                    b.HasIndex("DefaultMeasureId");

                    b.HasIndex("LifeCourseId");

                    b.ToTable("Indicator");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.IndicatorGroup", b =>
                {
                    b.Property<int>("IndicatorGroupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ActivityId");

                    b.Property<int?>("DefaultLifeCourseId");

                    b.HasKey("IndicatorGroupId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("DefaultLifeCourseId");

                    b.ToTable("IndicatorGroup");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.IndicatorGroupNameTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("IndicatorGroupId");

                    b.HasKey("TranslationId", "IndicatorGroupId");

                    b.HasIndex("IndicatorGroupId");

                    b.ToTable("IndicatorGroupNameTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.IndicatorNameTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("IndicatorId");

                    b.HasKey("TranslationId", "IndicatorId");

                    b.HasIndex("IndicatorId");

                    b.ToTable("IndicatorNameTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.LifeCourse", b =>
                {
                    b.Property<int>("LifeCourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefaultIndicatorId");

                    b.Property<int>("IndicatorGroupId");

                    b.HasKey("LifeCourseId");

                    b.HasIndex("DefaultIndicatorId");

                    b.HasIndex("IndicatorGroupId");

                    b.ToTable("LifeCourse");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.LifeCourseNameTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("LifeCourseId");

                    b.HasKey("TranslationId", "LifeCourseId");

                    b.HasIndex("LifeCourseId");

                    b.ToTable("LifeCourseNameTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.Measure", b =>
                {
                    b.Property<int>("MeasureId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CVSuppressAt");

                    b.Property<double?>("CVWarnAt");

                    b.Property<int?>("DefaultStrataId");

                    b.Property<bool>("Included");

                    b.Property<int>("IndicatorId");

                    b.HasKey("MeasureId");

                    b.HasIndex("DefaultStrataId");

                    b.HasIndex("IndicatorId");

                    b.ToTable("Measure");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.MeasureDefinitionTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("MeasureId");

                    b.HasKey("TranslationId", "MeasureId");

                    b.HasIndex("MeasureId");

                    b.ToTable("MeasureDefinitionTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.MeasureNameTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("MeasureId");

                    b.HasKey("TranslationId", "MeasureId");

                    b.HasIndex("MeasureId");

                    b.ToTable("MeasureNameTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.MeasurePopulationTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("MeasureId");

                    b.HasKey("TranslationId", "MeasureId");

                    b.HasIndex("MeasureId");

                    b.ToTable("MeasurePopulationTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.MeasureSourceTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("MeasureId");

                    b.HasKey("TranslationId", "MeasureId");

                    b.HasIndex("MeasureId");

                    b.ToTable("MeasureSourceTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.MeasureUnitTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("MeasureId");

                    b.HasKey("TranslationId", "MeasureId");

                    b.HasIndex("MeasureId");

                    b.ToTable("MeasureUnitTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.Point", b =>
                {
                    b.Property<int>("PointId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CVInterpretation");

                    b.Property<int?>("CVValue");

                    b.Property<int>("StrataId");

                    b.Property<double?>("ValueAverage");

                    b.Property<double?>("ValueLower");

                    b.Property<double?>("ValueUpper");

                    b.HasKey("PointId");

                    b.HasIndex("StrataId");

                    b.ToTable("Point");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.PointLabelTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("PointId");

                    b.HasKey("TranslationId", "PointId");

                    b.HasIndex("PointId");

                    b.ToTable("PointLabelTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.Strata", b =>
                {
                    b.Property<int>("StrataId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DefaultPointId");

                    b.Property<int>("MeasureId");

                    b.HasKey("StrataId");

                    b.HasIndex("DefaultPointId");

                    b.HasIndex("MeasureId");

                    b.ToTable("Strata");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.StrataNameTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("StrataId");

                    b.HasKey("TranslationId", "StrataId");

                    b.HasIndex("StrataId");

                    b.ToTable("StrataNameTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.StrataNotesTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("StrataId");

                    b.HasKey("TranslationId", "StrataId");

                    b.HasIndex("StrataId");

                    b.ToTable("StrataNotesTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.StrataPopulationTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("StrataId");

                    b.HasKey("TranslationId", "StrataId");

                    b.HasIndex("StrataId");

                    b.ToTable("StrataPopulationTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.StrataSourceTranslation", b =>
                {
                    b.Property<int>("TranslationId");

                    b.Property<int>("StrataId");

                    b.HasKey("TranslationId", "StrataId");

                    b.HasIndex("StrataId");

                    b.ToTable("StrataSourceTranslation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.Translation", b =>
                {
                    b.Property<int>("TranslationId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LanguageCode");

                    b.Property<string>("Text");

                    b.Property<string>("Type");

                    b.HasKey("TranslationId");

                    b.ToTable("Translation");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.Activity", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.IndicatorGroup", "DefaultIndicatorGroup")
                        .WithMany()
                        .HasForeignKey("DefaultIndicatorGroupId");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.ActivityDescriptionTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Activity", "Activity")
                        .WithMany("ActivityDescriptionTranslations")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("ActivityDescriptionTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.ActivityNameTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Activity", "Activity")
                        .WithMany("ActivityNameTranslations")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("ActivityNameTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.Indicator", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Measure", "DefaultMeasure")
                        .WithMany()
                        .HasForeignKey("DefaultMeasureId");

                    b.HasOne("ReactDotNetDemo.Models.PASS.LifeCourse", "LifeCourse")
                        .WithMany("Indicators")
                        .HasForeignKey("LifeCourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.IndicatorGroup", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Activity", "Activity")
                        .WithMany("IndicatorGroups")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.LifeCourse", "DefaultLifeCourse")
                        .WithMany()
                        .HasForeignKey("DefaultLifeCourseId");
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.IndicatorGroupNameTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.IndicatorGroup", "IndicatorGroup")
                        .WithMany("IndicatorGroupNameTranslations")
                        .HasForeignKey("IndicatorGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("IndicatorGroupNameTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.IndicatorNameTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Indicator", "Indicator")
                        .WithMany("IndicatorNameTranslations")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("IndicatorNameTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.LifeCourse", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Indicator", "DefaultIndicator")
                        .WithMany()
                        .HasForeignKey("DefaultIndicatorId");

                    b.HasOne("ReactDotNetDemo.Models.PASS.IndicatorGroup", "IndicatorGroup")
                        .WithMany("LifeCourses")
                        .HasForeignKey("IndicatorGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.LifeCourseNameTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.LifeCourse", "LifeCourse")
                        .WithMany("LifeCourseNameTranslations")
                        .HasForeignKey("LifeCourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("LifeCourseNameTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.Measure", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Strata", "DefaultStrata")
                        .WithMany()
                        .HasForeignKey("DefaultStrataId");

                    b.HasOne("ReactDotNetDemo.Models.PASS.Indicator", "Indicator")
                        .WithMany("Measures")
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.MeasureDefinitionTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Measure", "Measure")
                        .WithMany("MeasureDefinitionTranslations")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("MeasureDefinitionTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.MeasureNameTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Measure", "Measure")
                        .WithMany("MeasureNameTranslations")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("MeasureNameTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.MeasurePopulationTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Measure", "Measure")
                        .WithMany("MeasurePopulationTranslations")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("MeasurePopulationTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.MeasureSourceTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Measure", "Measure")
                        .WithMany("MeasureSourceTranslations")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("MeasureSourceTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.MeasureUnitTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Measure", "Measure")
                        .WithMany("MeasureUnitTranslations")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("MeasureUnitTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.Point", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Strata", "Strata")
                        .WithMany("Points")
                        .HasForeignKey("StrataId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.PointLabelTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Point", "Point")
                        .WithMany("PointLabelTranslations")
                        .HasForeignKey("PointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("PointLabelTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.Strata", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Point", "DefaultPoint")
                        .WithMany()
                        .HasForeignKey("DefaultPointId");

                    b.HasOne("ReactDotNetDemo.Models.PASS.Measure", "Measure")
                        .WithMany("Stratas")
                        .HasForeignKey("MeasureId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.StrataNameTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Strata", "Strata")
                        .WithMany("StrataNameTranslations")
                        .HasForeignKey("StrataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("StrataNameTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.StrataNotesTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Strata", "Strata")
                        .WithMany("StrataNotesTranslations")
                        .HasForeignKey("StrataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("StrataNotesTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.StrataPopulationTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Strata", "Strata")
                        .WithMany("StrataPopulationTranslations")
                        .HasForeignKey("StrataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("StrataPopulationTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ReactDotNetDemo.Models.PASS.StrataSourceTranslation", b =>
                {
                    b.HasOne("ReactDotNetDemo.Models.PASS.Strata", "Strata")
                        .WithMany("StrataSourceTranslations")
                        .HasForeignKey("StrataId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ReactDotNetDemo.Models.PASS.Translation", "Translation")
                        .WithMany("StrataSourceTranslations")
                        .HasForeignKey("TranslationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
